PERFORMANCE_PROFILER = False
OPTIMIZE = False
DISABLE_ASSERT = OPTIMIZE

import os
import sys

from scons_util import exclude, find, init_env, relocate_paths, export_dynamic
from scons_util import import_OpenGL, import_OpenMP, import_GSL, import_zlib, import_pthread, import_rt, import_dlsym, import_python, import_cuda

SRCDIRS = ['src/' + x
           for x in ['agent',
                     'app',
                     'brain',
                     'complexity',
                     'debugger',
                     'environment',
                     'genome',
                     'graphics',
                     'logs',
                     'proplib',
                     'main',
                     'tools',
                     'utils']]

def build():
    envs = env_create()

    Default( build_Polyworld(envs['Polyworld']) )
    Default( build_CalcComplexity(envs['CalcComplexity']) )
    Default( build_rancheck(envs['rancheck']) )
    Default( build_proputil(envs['proputil']) )
    Default( build_qt_clust(envs['qt_clust']) )
    build_cppprops(envs['cppprops'])

def build_Polyworld(env):
    blddir = '.bld/Polyworld'

    srcdirs = exclude(SRCDIRS, ['src/tools'])
    env.Replace( CPPPATH = exclude(env['CPPPATH'], ['src/tools']) )

    sources = Flatten([find(srcdir,
                            name = '*.cp')
                       for srcdir in srcdirs])

    import_cuda(env)
    sources += Flatten([find(srcdir,
                             name = '*.cu')
                        for srcdir in srcdirs])

    env.VariantDir(blddir, 'src', False)

    return env.Program('Polyworld',
                       relocate_paths(sources,
                                      'src',
                                      blddir))

def build_CalcComplexity(env):
    blddir = '.bld/CalcComplexity'

    sources = find('src/tools/CalcComplexity',
                   name = '*.cpp')
    sources += find('src/complexity',
                    name = 'complexity_*.cp')
    sources += ['src/utils/datalib.cp',
                'src/utils/Variant.cp',
                'src/utils/AbstractFile.cp',
                'src/utils/misc.cp']

    env.VariantDir(blddir, 'src', False)

    return env.Program('bin/CalcComplexity',
                       relocate_paths(sources,
                                      'src',
                                      blddir))

def build_rancheck(env):
    blddir = '.bld/rancheck'

    sources = ['src/tools/rancheck/rancheck.c']

    env.VariantDir(blddir, 'src', False)

    return env.Program('bin/rancheck',
                       relocate_paths(sources,
                                      'src',
                                      blddir))

def build_proputil(env):
    blddir = '.bld/proputil'

    sources = find('src/tools/proputil',
                   name = '*.cp')
    sources += find( 'src/proplib',
                     name = '*.cp',
                     ignore = ['state.cp'] )
    sources += ['src/utils/misc.cp', 'src/utils/Resources.cp']

    env.VariantDir(blddir, 'src', False)

    return env.Program('bin/proputil',
                       relocate_paths(sources,
                                      'src',
                                      blddir))

def build_qt_clust(env):
    blddir = '.bld/qt_clust'

    sources = ['src/tools/clustering/qt_clust.cpp']

    env.VariantDir(blddir, 'src', False)

    return env.Program('bin/qt_clust',
                       relocate_paths(sources,
                                      'src',
                                      blddir))

def build_cppprops(env):
    blddir = '.bld/cppprops/bld'

    sources = ['.bld/cppprops/src/generated.cpp']

    env.VariantDir(blddir, '.bld/cppprops/src', False)

    return env.SharedLibrary( '.bld/cppprops/bin/cppprops',
                              sources )

def env_create():
    envs = {}

    env = env_common = init_env(Environment(CXX='mpigxx', ENV=os.environ))

    env.Append( CPPSUFFIXES = ['.cp'] )
    if os.popen('uname').readlines()[0].strip() == 'Darwin':
        env['CXX'] = '/usr/local/bin/g++'
        env['CC'] = '/usr/local/bin/g++'
    cpp_flags = ['-g', '-Wall', '-Wno-format-security', '-std=gnu++0x' ]

    if OPTIMIZE:
        cpp_flags += ['-O2']

    if PERFORMANCE_PROFILER:
        # use the gnu gprof
        cpp_flags += ['-pg']
        env.Append( LINKFLAGS = ['-pg'] )

    if DISABLE_ASSERT:
        cpp_flags += ['-DNDEBUG']

    try:
        cpp_flags += os.environ['CPPFLAGS'].split(' ')
    except KeyError:
        pass
    env.Append( CPPFLAGS = cpp_flags )
    env.Append( CPPPATH = find('src',
                               type = 'dir') )
    try:
        env.Append( LINKFLAGS = os.environ['LDFLAGS'].split(' ') )
    except KeyError:
        pass

    # This allows proplib dynamic properties to reference globals in Polyworld.
    export_dynamic(env)

    import_OpenMP(env)
    import_pthread(env)
    import_rt(env)
    import_dlsym(env)
    import_GSL(env)

    env = envs['Polyworld'] = env_common.Clone()
    import_OpenGL(env)
    import_zlib(env)
    try:
        python_version = os.environ['PYTHONVER']
    except KeyError:
        python_version = None

    if python_version:
        import_python(env, python_version)
    else:
        import_python(env)

    env = envs['CalcComplexity'] = env_common.Clone()
    import_zlib(env)

    envs['rancheck'] = envs['CalcComplexity'].Clone()

    envs['proputil'] = envs['CalcComplexity'].Clone()

    if python_version:
        import_python( envs['proputil'], python_version )
    else:
        import_python( envs['proputil'] )

    envs['qt_clust'] = envs['CalcComplexity'].Clone()

    envs['cppprops'] = envs['Polyworld'].Clone()

    return envs

def hack_addCpExtension():
    # treat *.cp as C++ source
    module = __import__('SCons.Tool.c++',
                        globals(),
                        locals(),
                        ['CXXSuffixes'])
    module.CXXSuffixes += ['.cp']

    # scan *.cp for #include
    from SCons.Scanner.C import CScanner
    builder_object = DefaultEnvironment()["BUILDERS"]["Object"]
    builder_object.source_scanner.add_scanner('.cp',
                                              CScanner())

def hack_createSrcDir():
    if not os.path.exists('src'):
        os.mkdir('src')

    for dir in SRCDIRS:
        if not os.path.exists(dir):
            src = '../' + dir[4:] # strip src/
            dst = dir
            os.symlink(src,dst)

################################################################################

hack_addCpExtension()
hack_createSrcDir()

build()
